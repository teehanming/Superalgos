{
    "topic": "Data Mining",
    "pageNumber": 5,
    "type": "Data Mining - Indicator Frameworks",
    "definition": {
        "text": "Indicator Bots are ready to run custom code, or run code provided by a framework in order to do their job.",
        "updated": 1621705750736
    },
    "paragraphs": [
        {
            "style": "Title",
            "text": "Types of Indicator Implementations",
            "updated": 1622211317016
        },
        {
            "style": "List",
            "text": "Custom Code: This means the Indicator Bot will use custom made code to handle all data transformations.",
            "updated": 1621902418790
        },
        {
            "style": "Note",
            "text": "When running custom code, users have full control of the process and there is no limit on what can be done in terms of data manipulation. The trade off is that the user must be a developer."
        },
        {
            "style": "List",
            "text": "UI-Defined: This means that the Indictor Bot will base its behaviour on the definitions at the UI including available frameworks, as well as the code snippets provided by the user.",
            "updated": 1622211583849
        },
        {
            "style": "Note",
            "text": "By running one of the available frameworks, an indicator can do powerful stuff while only leaving the task of writing a very tiny piece of code to do the data transformations. In this case the flexibility is reduced comparing to custom code, but ease of development is greatly increased.",
            "updated": 1622211470919
        },
        {
            "style": "Success",
            "text": "You don't need to be a developer to write these code snippets, most of the time they are very simple javascript code."
        },
        {
            "style": "Title",
            "text": "Custom Code Indicators",
            "updated": 1621703361583
        },
        {
            "style": "Subtitle",
            "text": "Examples"
        },
        {
            "style": "Text",
            "text": "These two indicators are currently implemented with custom code."
        },
        {
            "style": "List",
            "text": "Candles-Volumes: Located at the Candles Data Mine",
            "updated": 1622195776057
        },
        {
            "style": "List",
            "text": "Bollinger-Bands: Located at the Bollinger Data Mine",
            "updated": 1622195696142
        },
        {
            "style": "Subtitle",
            "text": "How to Implement Custom Code",
            "updated": 1622212152208
        },
        {
            "style": "Text",
            "text": "The way to implement a Custom Code Indicator is to set up the config for the Bot's Process Definition using the botModule property. This tells the bot that there will be custom code used for this Indicator. This is an example of what it should look like:",
            "updated": 1622212134508
        },
        {
            "style": "Json",
            "text": "{\n    \"codeName\": \"Multi-Time-Frame-Market\",\n    \"description\": \"Produces different files with Multi-Time-Frame candles and volumes for entire markets.\",\n    \"deadWaitTime\": 0,\n    \"normalWaitTime\": 0,\n    \"retryWaitTime\": 10000,\n    \"botModule\": \"Candles Volumes Multi Time Frame Market\"\n}",
            "updated": 1621703524616
        },
        {
            "style": "Text",
            "text": "Then you will need to locate the Project Schema File for the project your bot belongs to. Inside of that file you will need to add some definitions in order for the system to be able to load your new module at runtime and later execute it once users run your bot implemented in this way.",
            "updated": 1622195849390
        },
        {
            "style": "Success",
            "text": "Most likely your new Bot will be added to the Superalgos project, so you should find the Project Schema File inside the Projects folder.",
            "updated": 1622196885148
        },
        {
            "style": "Text",
            "text": "The definition you will need to add in the Schema file should look something like this:",
            "updated": 1622212304362
        },
        {
            "style": "Json",
            "text": "\"botModules\": [\n                {\n                    \"name\": \"Candles Volumes Multi Time Frame Market\",\n                    \"propertyName\": \"candlesVolumesMultiTimeFrameMarket\",\n                    \"functionName\": \"newFoundationsBotModulesCandlesVolumesMultiTimeFrameMarket\",\n                    \"fileName\": \"CandlesVolumesMultiTimeFrameMarket.js\",\n                    \"folderName\": \"Indicator-Bot/Candles-Volumes\"\n                },",
            "updated": 1621703869144
        },
        {
            "style": "Text",
            "text": "Finally, you will need to add a new Javascript module with your code to the codebase using the same file name you defined in the Schema file.",
            "updated": 1622212386180
        },
        {
            "style": "Title",
            "text": "UI-Defined Indicators",
            "updated": 1621704044375
        },
        {
            "style": "Text",
            "text": "In this case the list is long, as almost all other indicators in existence were build using a framework and defined at the UI with the minimun amount of code written by the users who created them."
        },
        {
            "style": "Subtitle",
            "text": "Indicator Frameworks",
            "updated": 1621702926075
        },
        {
            "style": "Text",
            "text": "This is the complete list of available Indicator Frameworks",
            "updated": 1621702917486
        },
        {
            "style": "List",
            "text": "From-One-Min-To-Multi-Time-Frame-Daily:  It is used to convert one Dataset from type One-Min-Daily to Multi-Time-Frame-Daily.",
            "updated": 1621703039301
        },
        {
            "style": "List",
            "text": "From-One-Min-To-Multi-Time-Frame-Market: It is used to convert one Dataset from type One-Min-Daily to Multi-Time-Frame-Market.",
            "updated": 1621703053342
        },
        {
            "style": "List",
            "text": "Multi-Time-Frame-Daily: It is used to process data currently available at a Dataset of type Multi-Time-Frame-Daily and produces as output a Dataset of the same type. How the data is going to be transformed is up to the user, since at the UI users can provide code snippets to handle the data transformation at the Data Building Procedure node.",
            "updated": 1622197436293
        },
        {
            "style": "List",
            "text": "Multi-Time-Frame-Market: It is used to process data currently available at a Dataset of type Multi-Time-Frame-Market and produces as output a Dataset of the same type. How the data is going to be transformed is up to the user, since at the UI users can provide code snippets to handle the data transformation at the Data Building Procedure node.",
            "updated": 1622197449190
        },
        {
            "style": "Subtitle",
            "text": "How to Use an Indicator Framework",
            "updated": 1622212547671
        },
        {
            "style": "Text",
            "text": "In order to use a framework at your Indicator Bot, all you need to do is specify the framework name at the Process Definition under the framework property.",
            "updated": 1622212711775
        },
        {
            "style": "Text",
            "text": "In this example, the process will use the From-One-Min-To-Multi-Time-Frame-Daily framework.",
            "updated": 1622197494708
        },
        {
            "style": "Json",
            "text": "{\n    \"codeName\": \"From-One-Min-To-Multi-Time-Frame-Daily\",\n    \"normalWaitTime\": 0,\n    \"retryWaitTime\": 10000,\n    \"framework\": {\n        \"name\": \"From-One-Min-To-Multi-Time-Frame-Daily\"\n    }\n}",
            "updated": 1621704295681
        },
        {
            "style": "Text",
            "text": "Here is an example using the Multi-Time-Frame-Market framework.",
            "updated": 1622212639925
        },
        {
            "style": "Json",
            "text": "{\n    \"codeName\": \"Multi-Time-Frame-Market\",\n    \"normalWaitTime\": 0,\n    \"retryWaitTime\": 10000,\n    \"framework\": {\n        \"name\": \"Multi-Time-Frame-Market\"\n    }\n}",
            "updated": 1621704273628
        }
    ]
}